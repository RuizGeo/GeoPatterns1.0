# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Sampling
                                 A QGIS plugin
 Zonal statistics from polygon
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-03-14
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Luis Fernando Chimelo Ruiz
        email                : ruiz.ch@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QObject, pyqtSignal
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.core import *
import numpy as np
import os
import sys
import processing
import time
#To evaluate
from .to_evaluate import list_is_empty, exist_file, is_defined,is_crs
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sampling_dialog import SamplingDialog
import os.path


class Sampling:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Sampling_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = SamplingDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GeoPatterns')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'Sampling')
        self.toolbar.setObjectName(u'Sampling')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Sampling', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sampling/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Sampling'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sampling'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
        #disconnect        

        return 0
    
    def run(self):
        """Run method that performs all the real work"""
        #Clear GUI
        self.dlg.ui.lineEditInRast.clear()
        self.dlg.ui.lineEditVec.clear()
        self.dlg.ui.textEditOut.clear()
        #Zero  progress bar
        self.dlg.ui.progressBar.setValue(0)
        
        #Connect functions
        self.dlg.ui.buttonInRast.clicked.connect(self.set_path_rasters)
        self.dlg.ui.buttonInVec.clicked.connect(self.set_path_vectors)
        self.dlg.ui.buttonCancel.clicked.connect(self.cancel_GUI)
        self.dlg.ui.buttonRun.clicked.connect(self.run_sampling)           
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
        
    def set_path_rasters(self):
        #Open Directory
        self.pathRasters = QFileDialog.getExistingDirectory(None, self.tr('Open a folder'), None, QFileDialog.ShowDirsOnly)  
        #Set lineEditPathSegs
        self.dlg.ui.lineEditInRast.setText(self.pathRasters)
        return 0
    
    def set_path_vectors(self):
        #Open Directory
        self.pathVecs = QFileDialog.getExistingDirectory(None, self.tr('Open a folder'), None, QFileDialog.ShowDirsOnly)  
        #Set lineEditPathSegs
        self.dlg.ui.lineEditVec.setText(self.pathVecs)
        return 0
    
    def cancel_GUI(self):
        #disconnect        
        self.dlg.ui.buttonInRast.clicked.disconnect(self.set_path_rasters)
        self.dlg.ui.buttonInVec.clicked.disconnect(self.set_path_vectors)
        self.dlg.ui.buttonCancel.clicked.disconnect(self.cancel_GUI)
        self.dlg.ui.buttonRun.clicked.disconnect(self.run_sampling)
        
        self.dlg.close()
        return 0
    
    def run_sampling (self):
        #Get lineEditInRasters - Input rasters path
        if is_defined(self.dlg.ui.lineEditInRast.text(),"Input: Undefined rasters path"):
             return 0 
        #Get lineEditInRasters - Input vectors path        
        elif is_defined(self.dlg.ui.lineEditVec.text(),"Input: Undefined vectors path"):
            return 0 
        
        else:
           
            #Get statistics
            stats=[]
            if self.dlg.ui.checkBoxSum.checkState():
                #Append statistics
                stats.append(1)
                
            if self.dlg.ui.checkBoxMean.checkState():
                #Append statistics
                stats.append(2)
                
            if self.dlg.ui.checkBoxMedian.checkState():
                #Append statistics
                stats.append(3)
                
            if self.dlg.ui.checkBoxSTD.checkState():
                #Append statistics
                stats.append(4)
                
            if self.dlg.ui.checkBoxMin.checkState():
                #Append statistics
                stats.append(5)
                
            if self.dlg.ui.checkBoxMax.checkState():
                #Append statistics
                stats.append(6)
                
            if self.dlg.ui.checkBoxRange.checkState():
                #Append statistics
                stats.append(7)
                
            if self.dlg.ui.checkBoxMinor.checkState():
                #Append statistics
                stats.append(8)
                
            if self.dlg.ui.checkBoxMajor.checkState():
                #Append statistics
                stats.append(9)
                
            if self.dlg.ui.checkBoxVariety.checkState():
                #Append statistics
                stats.append(10)
            #stattistics 
            if list_is_empty(stats,"Parameters: Select statistics"):
                return 0 
            #Set lineEdit Out
            self.dlg.ui.textEditOut.setText('Statistics')
            self.dlg.ui.textEditOut.append('Sum: 1 - Mean: 2 - Median: 3 - StedDev: 4 - Min: 5')
            self.dlg.ui.textEditOut.append('Max: 6 - Range: 7 - Minority: 8 - Majority: 9 - Variety: 10')
            
            print ('Stats: ',stats)
            #Get files paths
            rasters_path=self.dlg.ui.lineEditInRast.text()
            vectors_path=self.dlg.ui.lineEditVec.text()
            #Assess path
            if exist_file(rasters_path,'Input: rasters path is not exist'):
                return 0
            elif exist_file(vectors_path,'Input: vectors path is not exist'):
                    return 0
            else:
                    pass
            #Read rasters files
            rasters_files=[rasters_path+os.sep+file for file in os.listdir(rasters_path) if file.endswith(".tif") or file.endswith(".tiff")]
            #Read vectors files
            vectors_files=[vectors_path+os.sep+file for file in os.listdir(vectors_path) if file.endswith(".shp") ]
            #Rasters and vectors files
            if list_is_empty(rasters_files,"Input: There isn't rasters (Rasters path: .tif or .tiff)"):
                return 0 
            elif list_is_empty(vectors_files,"Input: There isn't vectors (Vectors path: .shp)"):
                return 0 
            
            else:
                pass
            #Get EPSG
            cod_epsg= QgsRasterLayer(rasters_files[0], 'raster').crs().authid()
            #ASsess rasters file exist
            for ras in rasters_files:
                raster = QgsRasterLayer(ras, 'raster')
                cod_epsg1 = raster.crs().authid()
                
                if is_crs( cod_epsg, cod_epsg1,"Differents SRC: "+cod_epsg+' - '+ cod_epsg1+':'+ras)==False:
                    return 0         
                
                elif not raster.isValid():
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Error read layer: "+ras)
                    msg.setWindowTitle("Info")
                    msg.exec_() 
                    return 0
                else:
                    pass
            #ASsess vectors file exist
            for vc in vectors_files:
                #Read vector
                vector = QgsVectorLayer(vc, 'vector', 'ogr')
                #Assess read file
                if  not vector.isValid():
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Error read layer: "+vc)
                    msg.setWindowTitle("Info")
                    msg.exec_() 
                    return 0
                else:
                    pass
            #somar loop
            count=1
            #set value progressBar
            self.dlg.ui.progressBar.setValue(1.0)
            totale = len(vectors_files)
            #Loop about vectors_files
            for vec in vectors_files:
                #Set lineEdi Out
                self.dlg.ui.textEditOut.append(vec)
                #Loop about rasters files
                for rast in rasters_files:
                    #raster = QgsRasterLayer(rast, 'raster')
                    column = rast.split(os.sep)[-1].split('.')[0]
                    #Get parameters
                    parameters = {'INPUT_RASTER':rast,'RASTER_BAND':1,'INPUT_VECTOR':vec,\
                                  'COLUMN_PREFIX':column,\
                                  'STATS':stats}
                    #Run algortms
                    processing.run('qgis:zonalstatistics',parameters)
                    #Set lineEdi Out
                    self.dlg.ui.textEditOut.append(column)
                #set value progressBar
                self.dlg.ui.progressBar.setValue((float(count)/totale)*100)
                count+=1
            #set 100 progressaBar
            self.dlg.ui.progressBar.setValue(100)